using System.Diagnostics;
using System.Text.Json.Serialization;

namespace Salix.AspNetCore.JsonExceptionHandler;

/// <summary>
/// Data Transfer objects to send information about server (code) error (exception) during API call.
/// Used mainly by Global Error Handling middleware.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public class ApiError
{
    /// <summary>
    /// Type or error response.
    /// Should be in contract as per https://tools.ietf.org/html/rfc7807 .
    /// Avoiding referencing URLs in internal.
    /// </summary>
    public string Type => this.ErrorType.ToString();

    /// <summary>
    /// A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem,
    /// except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section 3.4).
    /// Message of an server error (Exception.Message) or general problem description.
    /// Should be in contract as per https://tools.ietf.org/html/rfc7807 .
    /// </summary>
    public string Title { get; set; } = string.Empty;

    /// <summary>
    /// The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
    /// Should be in contract as per https://tools.ietf.org/html/rfc7807 .
    /// </summary>
    public int Status { get; set; }

    /// <summary>
    /// Requested URL which throws exception or has problems.
    /// </summary>
    public string? RequestedUrl { get; set; }

    /// <summary>
    /// Type of an error - for fast processing in client logic.
    /// </summary>
    public ApiErrorType ErrorType { get; set; }

    /// <summary>
    /// If exception was thrown - here is exception type.
    /// </summary>
    public string ExceptionType { get; set; } = "Undetermined";

    /// <summary>
    /// Inner exception message, if such exists.
    /// </summary>
    public string? InnerException { get; set; }

    /// <summary>
    /// Inner exception message of Inner exception, if such exists.
    /// Also adds up any further inner exception messages recursively.
    /// </summary>
    public string? InnerInnerException { get; set; }

    /// <summary>
    /// Top Stack trace frames (only own code - omitted .Net internal and 3rd party library exceptions, which can be found in logging).
    /// </summary>
    public List<string> StackTrace { get; set; } = new List<string>();

    /// <summary>
    /// List of validation errors, when Error is data validation error.
    /// </summary>
    public List<ApiDataValidationError> ValidationErrors { get; set; } = new();

    /// <summary>
    /// Specify how exception handler should deal with exception.<br/>
    /// Default - logs error via Logger (you specify sinks) and returns Json error object to client (re-throws).<br/>
    /// Other combinations can be specified, including completely ignoring the error.<br/>
    /// Ignoring may come handy to set via <see cref="ApiJsonExceptionMiddleware.HandleSpecialException(ApiError, Exception)"/> method<br/>
    /// to ignore <see cref="OperationCanceledException"/> and exceptions derived from it.
    /// </summary>
    [JsonIgnore]
    public ApiErrorBehavior ErrorBehavior { get; set; } = ApiErrorBehavior.LogAndThrowError;

    /// <summary>
    /// Displays object main properties in Debug screen. (Only for development purposes).
    /// </summary>
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private string DebuggerDisplay => $"{this.ExceptionType}: {this.Title}";
}
